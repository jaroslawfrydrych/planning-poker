{"version":3,"sources":["./src/app/poker/host/host.module.ts","./src/app/poker/host/wait/wait.guard.ts","./src/app/poker/host/board/board.resolver.ts","./src/app/poker/host/wait/wait.component.ts","./src/app/poker/host/wait/wait.component.html","./src/app/poker/host/host-routing.module.ts","./src/app/poker/host/board/board.component.ts","./src/app/poker/host/board/board.component.html"],"names":[],"mappings":"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","file":"host-host-module.js","sourcesContent":["import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { SharedModule } from '../../shared/shared.module';\nimport { BoardComponent } from './board/board.component';\nimport { HostRoutingModule } from './host-routing.module';\nimport { WaitComponent } from './wait/wait.component';\n\n@NgModule({\n  declarations: [BoardComponent, WaitComponent],\n  imports: [\n    CommonModule,\n    HostRoutingModule,\n    SharedModule\n  ]\n})\nexport class HostModule {\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, Router } from '@angular/router';\nimport { HostService } from '../host.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WaitGuard implements CanActivate {\n\n  constructor(private hostService: HostService,\n              private router: Router) {\n  }\n\n  canActivate(): boolean {\n    const hasHostRoom: boolean = !!this.hostService.hostRoom;\n\n    if (hasHostRoom) {\n      this.router.navigateByUrl('/');\n    }\n\n    return !hasHostRoom;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RoomInfoInterface } from '../../../../../../../libs/api-interfaces/src';\nimport { HostService } from '../host.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BoardResolver implements Resolve<RoomInfoInterface> {\n\n  constructor(private readonly hostService: HostService) {\n  }\n\n  public resolve(): Observable<RoomInfoInterface> {\n    return this.hostService.createRoom();\n  }\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { of, Subject } from 'rxjs';\nimport { delay, takeUntil } from 'rxjs/operators';\n\n@Component({\n  selector: 'planning-poker-wait',\n  templateUrl: './wait.component.html',\n  styleUrls: ['./wait.component.scss']\n})\nexport class WaitComponent implements OnInit, OnDestroy {\n\n  private destroySubject: Subject<null> = new Subject<null>();\n\n  constructor(private router: Router) {\n  }\n\n  public ngOnInit(): void {\n    this.handleWaitPage();\n  }\n\n  public ngOnDestroy(): void {\n    this.destroySubject.next(null);\n  }\n\n  private handleWaitPage() {\n    of(null)\n      .pipe(\n        delay(1500),\n        takeUntil(this.destroySubject)\n      )\n      .subscribe(() => {\n        this.router.navigateByUrl('/host/board');\n      });\n  }\n}\n","<planning-poker-icon class=\"loop-loader\">\n  loop\n</planning-poker-icon>\n<p>Creating room...</p>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { BoardComponent } from './board/board.component';\nimport { BoardResolver } from './board/board.resolver';\nimport { WaitComponent } from './wait/wait.component';\nimport { WaitGuard } from './wait/wait.guard';\n\nconst routes: Routes = [\n  {\n    path: 'wait',\n    component: WaitComponent,\n    canActivate: [\n      WaitGuard\n    ],\n    data: {\n      animation: 'WaitComponent'\n    }\n  },\n  {\n    path: 'board',\n    component: BoardComponent,\n    resolve: {\n      data: BoardResolver\n    },\n    data: {\n      animation: 'BoardComponent'\n    }\n  },\n  {\n    path: '**',\n    redirectTo: 'wait'\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HostRoutingModule {\n}\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport {\n  Client,\n  ClientType,\n  GameStateBroadcastDto,\n  GameStates,\n  RoomInfoInterface,\n  UserStatuses\n} from '@planning-poker/api-interfaces';\nimport { ButtonColor } from '@shared/button/button-color.enum';\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { HostService } from '../host.service';\n\n@Component({\n  selector: 'planning-poker-board',\n  templateUrl: './board.component.html',\n  styleUrls: ['./board.component.scss']\n})\nexport class BoardComponent implements OnInit, OnDestroy {\n\n  public roomId: string;\n  public users$: Observable<Client[]>;\n  public userStatues = UserStatuses;\n  public gameState$: Observable<GameStates>;\n  public gameStates = GameStates;\n  public buttonColors = ButtonColor;\n  public reviewCardsSubject$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n  public currentTime$: Observable<Date>;\n  private onDestroySubject: Subject<null> = new Subject<null>();\n\n  constructor(private hostService: HostService,\n              private activatedRoute: ActivatedRoute,\n              private $gaService: GoogleAnalyticsService) {\n  }\n\n  public ngOnInit(): void {\n    const resolverData: RoomInfoInterface = this.activatedRoute.snapshot.data.data;\n    this.roomId = resolverData.id;\n    this.hostService.joinRoom(this.roomId);\n\n    this.users$ = this.hostService.getUsers()\n      .pipe(\n        map((users: Client[]) => {\n          return users.filter((user: Client) => user.type === ClientType.VOTER);\n        })\n      );\n\n    this.currentTime$ = this.hostService.currentTime();\n    this.gameState$ = this.hostService.getGameState()\n      .pipe(\n        map((data: GameStateBroadcastDto) => data.state),\n        tap((gameState: GameStates) => this.handleGameStateChange(gameState))\n      );\n  }\n\n  public ngOnDestroy(): void {\n    this.onDestroySubject.next(null);\n  }\n\n  public toggleGameState(): void {\n    this.hostService.toggleGameState(this.roomId);\n    this.$gaService.event('toggle_game_state', 'host', 'Toggle game state');\n  }\n\n  private handleGameStateChange(gameState: GameStates): void {\n    this.reviewCardsSubject$.next(gameState === GameStates.REVIEW);\n  }\n}\n","<header>\n  <h1>ROOM ID: {{roomId}}</h1>\n  <span class=\"clock\">{{currentTime$ | async | date:'HH:mm'}}</span>\n</header>\n\n<div class=\"cards\">\n  <ng-container *ngFor=\"let user of users$ | async\">\n    <planning-poker-card [boardCard]=\"true\"\n                         [review]=\"reviewCardsSubject$ | async\"\n                         [card]=\"user.card\"\n                         [label]=\"user.name\"\n                         [playerReady]=\"user.status === userStatues.VOTED\"></planning-poker-card>\n  </ng-container>\n</div>\n\n<footer>\n  <button planningPokerButton\n          class=\"toggle-game-state\"\n          [buttonColor]=\"buttonColors.SECONDARY\"\n          [ngSwitch]=\"gameState$ | async\"\n          (click)=\"toggleGameState()\">\n    <ng-container *ngSwitchCase=\"gameStates.REVIEW\">New voting</ng-container>\n    <ng-container *ngSwitchDefault>Finish Voting</ng-container>\n  </button>\n</footer>\n"],"sourceRoot":"webpack:///"}