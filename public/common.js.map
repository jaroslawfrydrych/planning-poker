{"version":3,"sources":["./src/app/poker/host/host.service.ts","./src/app/poker/guest/guest.service.ts","./src/app/poker/services/poker.service.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  Client,\n  ClientType,\n  GameStateBroadcastDto,\n  GameStates,\n  RoomInfoInterface,\n  UsersResponseDto\n} from '@planning-poker/api-interfaces';\nimport { BehaviorSubject, interval, Observable } from 'rxjs';\nimport { delay, map, startWith, tap } from 'rxjs/operators';\nimport { PokerService } from '../services/poker.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HostService {\n\n  public gameState$: Observable<GameStates>;\n  private gameStateSubject$: BehaviorSubject<GameStates>;\n  private hostRoomSubject$: BehaviorSubject<string>;\n\n  constructor(private pokerService: PokerService) {\n    this.gameStateSubject$ = new BehaviorSubject<GameStates>(GameStates.IN_PROGRESS);\n    this.gameState$ = this.gameStateSubject$.asObservable();\n    this.hostRoomSubject$ = new BehaviorSubject<string>(null);\n  }\n\n  public get hostRoom(): string {\n    return this.hostRoomSubject$.getValue();\n  }\n\n  public set hostRoom(value: string) {\n    this.hostRoomSubject$.next(value);\n  }\n\n  public getUsers(): Observable<Client[]> {\n    return this.pokerService.getUsers()\n      .pipe(\n        map((response: UsersResponseDto) => {\n          return response.clients;\n        })\n      );\n  }\n\n  public toggleGameState(roomId: string): void {\n    this.pokerService.toggleGameState(roomId);\n  }\n\n  public currentTime(): Observable<Date> {\n    return interval(1000)\n      .pipe(\n        startWith(<Date>null),\n        map(() => new Date())\n      );\n  }\n\n  public createRoom(): Observable<RoomInfoInterface> {\n    return this.pokerService.createRoom()\n      .pipe(\n        tap((roomInfo: RoomInfoInterface) => this.hostRoom = roomInfo.id)\n      );\n  }\n\n  public getGameState(): Observable<GameStateBroadcastDto> {\n    return this.pokerService.receiveGameState();\n  }\n\n  public joinRoom(room: string): void {\n    this.pokerService.joinRoom(room, ClientType.HOST);\n  }\n}\n\n","import { Injectable } from '@angular/core';\nimport {\n  Cards,\n  ClientType,\n  GameStateBroadcastDto,\n  JoinRoomCodeResponseDto,\n  RoomInfoInterface\n} from '@planning-poker/api-interfaces';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { delay, tap } from 'rxjs/operators';\nimport { PokerService } from '../services/poker.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GuestService {\n\n  private guestRoomSubject$: BehaviorSubject<string>;\n\n  constructor(private pokerService: PokerService) {\n    this.guestRoomSubject$ = new BehaviorSubject<string>(null);\n  }\n\n  public get guestRoom(): string {\n    return this.guestRoomSubject$.getValue();\n  }\n\n  public set guestRoom(value: string) {\n    this.guestRoomSubject$.next(value);\n  }\n\n  public checkCode(code: string): Observable<JoinRoomCodeResponseDto> {\n    return this.pokerService.checkRoomCode(code)\n      .pipe(\n        delay(500),\n        tap((response: JoinRoomCodeResponseDto) => {\n          if (response.valid) {\n            this.guestRoom = code;\n          }\n        })\n      );\n  }\n\n  public sendCard(card: Cards): void {\n    this.pokerService.sendVote({\n      card,\n      room: this.guestRoom\n    });\n  }\n\n  public getGameState(): Observable<GameStateBroadcastDto> {\n    return this.pokerService.receiveGameState();\n  }\n\n  public joinRoom(name: string): void {\n    this.pokerService.joinRoom(this.guestRoom, ClientType.VOTER, name);\n  }\n\n  public getRoomInfo(): Observable<RoomInfoInterface> {\n    return this.pokerService.getRoomInfo(this.guestRoom);\n  }\n\n  public onRoomRemove(): Observable<null> {\n    return this.pokerService.onRoomRemove();\n  }\n}\n","import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport {\n  ClientType,\n  GameStateBroadcastDto,\n  GameStates,\n  JoinRequestDto,\n  JoinRoomCodeRequestDto,\n  JoinRoomCodeResponseDto,\n  RoomInfoInterface,\n  SocketEvents,\n  State,\n  UsersResponseDto,\n  Vote,\n  Voted\n} from '@planning-poker/api-interfaces';\nimport { Socket } from 'ngx-socket-io';\nimport { Observable } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PokerService {\n\n  constructor(private socket: Socket,\n              private httpClient: HttpClient) {\n  }\n\n  public createRoom(): Observable<RoomInfoInterface> {\n    return this.httpClient\n      .post<RoomInfoInterface>('/api/create-room', {\n        clientId: this.socket.ioSocket.id\n      });\n  }\n\n  public sendVote(vote: Vote): void {\n    this.socket.emit(SocketEvents.VOTE, vote);\n  }\n\n  public changeGameState(state: GameStates): void {\n    const stateMessage: State = {\n      state\n    };\n\n    this.socket.emit(SocketEvents.STATE, stateMessage);\n  }\n\n  public toggleGameState(roomId: string): void {\n    this.socket.emit(SocketEvents.STATE, roomId);\n  }\n\n  public receiveVote(): Observable<Voted> {\n    return this.socket.fromEvent(SocketEvents.VOTED);\n  }\n\n  public receiveGameState(): Observable<GameStateBroadcastDto> {\n    return this.socket.fromEvent(SocketEvents.STATE);\n  }\n\n  public getUsers(): Observable<UsersResponseDto> {\n    return this.socket.fromEvent(SocketEvents.USERS);\n  }\n\n  public joinRoom(room: string, type: ClientType, name?: string): void {\n    const request: JoinRequestDto = {\n      name,\n      room,\n      type\n    };\n    this.socket.emit(SocketEvents.JOIN, request);\n  }\n\n  public checkRoomCode(code: string): Observable<JoinRoomCodeResponseDto> {\n    const request: JoinRoomCodeRequestDto = {\n      id: code\n    };\n\n    return this.httpClient.post<JoinRoomCodeResponseDto>('/api/join-room-code', request);\n  }\n\n  public getRoomInfo(code: string): Observable<RoomInfoInterface> {\n    const request: JoinRoomCodeRequestDto = {\n      id: code\n    };\n\n    return this.httpClient.post<RoomInfoInterface>('/api/room-info', request);\n  }\n\n  public onRoomRemove(): Observable<null> {\n    return this.socket.fromEvent(SocketEvents.ROOM_REMOVED);\n  }\n}\n"],"sourceRoot":"webpack:///"}